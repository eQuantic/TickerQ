name: Publish eQuantic TickerQ Packages

on:
  workflow_dispatch:
    inputs:
      cosmosdb_version:
        description: 'CosmosDb package version (e.g., 1.0.4)'
        required: true
        type: string
      publish_base_packages:
        description: 'Publish base packages (TickerQ, Utilities, EFCore, Dashboard)?'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main
    paths:
      - 'src/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb/**'
      - '.github/workflows/publish-cosmosdb.yml'

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check.outputs.should_build }}
      should_publish_cosmosdb: ${{ steps.check.outputs.should_publish_cosmosdb }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get versions
        id: get-version
        run: |
          # Get TickerQ version from VERSION file (for dependencies like TickerQ.Utilities)
          TICKERQ_VERSION=$(cat VERSION)
          echo "tickerq_version=$TICKERQ_VERSION" >> $GITHUB_OUTPUT
          echo "📦 TickerQ version (dependencies): $TICKERQ_VERSION"

          # Get CosmosDb version from .csproj or workflow input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COSMOSDB_VERSION="${{ github.event.inputs.cosmosdb_version }}"
          else
            COSMOSDB_VERSION=$(grep -oP '<Version>\K[^<]+' src/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb.csproj)
          fi
          echo "version=$COSMOSDB_VERSION" >> $GITHUB_OUTPUT
          echo "📦 CosmosDb package version: $COSMOSDB_VERSION"

          # Check if should publish base packages
          PUBLISH_BASE="${{ github.event.inputs.publish_base_packages }}"
          echo "publish_base=$PUBLISH_BASE" >> $GITHUB_OUTPUT
          echo "📦 Publish base packages: $PUBLISH_BASE"

      - name: Check if package already exists on NuGet
        id: check
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          PACKAGE_ID="equantic.tickerq.entityframeworkcore.cosmosdb"
          URL="https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/$VERSION/$PACKAGE_ID.$VERSION.nupkg"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

          PUBLISH_BASE="${{ github.event.inputs.publish_base_packages }}"

          if [ "$STATUS" = "200" ]; then
            echo "✅ Package $PACKAGE_ID $VERSION already exists on NuGet"
            echo "should_publish_cosmosdb=false" >> $GITHUB_OUTPUT

            # If publish_base_packages=true, we should still build and publish base packages
            if [ "$PUBLISH_BASE" = "true" ]; then
              echo "📦 Will publish base packages only"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️  Nothing to publish, skipping workflow"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Package $PACKAGE_ID $VERSION does NOT exist on NuGet"
            echo "should_publish_cosmosdb=true" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET 8 and .NET 9
        if: steps.check.outputs.should_build == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Build dependencies in correct order
        if: steps.check.outputs.should_build == 'true'
        run: |
          TICKERQ_VERSION="${{ steps.get-version.outputs.tickerq_version }}"
          COSMOSDB_VERSION="${{ steps.get-version.outputs.version }}"

          echo "📦 Building with TickerQ v$TICKERQ_VERSION, CosmosDb v$COSMOSDB_VERSION"

          # Step 0: Create PackageVersion.props with TickerQ version (for dependencies)
          cat > PackageVersion.props <<EOF
          <Project>
            <PropertyGroup>
              <PackageVersion>$TICKERQ_VERSION</PackageVersion>
            </PropertyGroup>
          </Project>
          EOF

          # Step 1: Build and pack TickerQ.Utilities with TickerQ version (2.5.3)
          dotnet build src/TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release
          dotnet pack src/TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release --output ./temp-nupkgs

          # Step 2: Add local NuGet source
          dotnet nuget add source "$(pwd)/temp-nupkgs" --name TempLocalNupkgs

          # Step 3: Build TickerQ.SourceGenerator
          dotnet build src/TickerQ.SourceGenerator/TickerQ.SourceGenerator.csproj --configuration Release

          # Step 4: Build dependencies with TickerQ version
          dotnet build src/TickerQ/TickerQ.csproj --configuration Release -p:GeneratePackageOnBuild=false
          dotnet build src/TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj --configuration Release -p:GeneratePackageOnBuild=false
          dotnet build src/TickerQ.Dashboard/TickerQ.Dashboard.csproj --configuration Release -p:GeneratePackageOnBuild=false

          # Step 4.5: Pack base eQuantic packages locally (for CosmosDb restore)
          echo "📦 Packing eQuantic.TickerQ.Utilities v$TICKERQ_VERSION to temp-nupkgs..."
          dotnet pack src/TickerQ.Utilities/TickerQ.Utilities.csproj \
            --configuration Release \
            --no-build \
            --output ./temp-nupkgs \
            -p:PackageId=eQuantic.TickerQ.Utilities \
            -p:PackageVersion=$TICKERQ_VERSION

          echo "📦 Packing eQuantic.TickerQ v$TICKERQ_VERSION to temp-nupkgs..."
          dotnet pack src/TickerQ/TickerQ.csproj \
            --configuration Release \
            --no-build \
            --output ./temp-nupkgs \
            -p:PackageId=eQuantic.TickerQ \
            -p:PackageVersion=$TICKERQ_VERSION

          # Fix dependencies in eQuantic.TickerQ to use eQuantic.TickerQ.Utilities
          echo "🔧 Fixing dependencies in eQuantic.TickerQ package..."
          unzip -q ./temp-nupkgs/eQuantic.TickerQ.$TICKERQ_VERSION.nupkg -d ./temp-extract
          sed -i 's/<dependency id="TickerQ\.Utilities"/<dependency id="eQuantic.TickerQ.Utilities"/g' ./temp-extract/eQuantic.TickerQ.nuspec
          cd ./temp-extract && zip -q -r ../temp-nupkgs/eQuantic.TickerQ.$TICKERQ_VERSION.nupkg * && cd ..
          rm -rf ./temp-extract

          echo "📦 Packing eQuantic.TickerQ.EntityFrameworkCore v$TICKERQ_VERSION to temp-nupkgs..."
          dotnet pack src/TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj \
            --configuration Release \
            --no-build \
            --output ./temp-nupkgs \
            -p:PackageId=eQuantic.TickerQ.EntityFrameworkCore \
            -p:PackageVersion=$TICKERQ_VERSION

          # Fix dependencies in eQuantic.TickerQ.EntityFrameworkCore
          echo "🔧 Fixing dependencies in eQuantic.TickerQ.EntityFrameworkCore package..."
          unzip -q ./temp-nupkgs/eQuantic.TickerQ.EntityFrameworkCore.$TICKERQ_VERSION.nupkg -d ./temp-extract
          sed -i 's/<dependency id="TickerQ\.Utilities"/<dependency id="eQuantic.TickerQ.Utilities"/g' ./temp-extract/eQuantic.TickerQ.EntityFrameworkCore.nuspec
          sed -i 's/<dependency id="TickerQ"/<dependency id="eQuantic.TickerQ"/g' ./temp-extract/eQuantic.TickerQ.EntityFrameworkCore.nuspec
          cd ./temp-extract && zip -q -r ../temp-nupkgs/eQuantic.TickerQ.EntityFrameworkCore.$TICKERQ_VERSION.nupkg * && cd ..
          rm -rf ./temp-extract

          echo "📦 Packing eQuantic.TickerQ.Dashboard v$TICKERQ_VERSION to temp-nupkgs..."
          dotnet pack src/TickerQ.Dashboard/TickerQ.Dashboard.csproj \
            --configuration Release \
            --no-build \
            --output ./temp-nupkgs \
            -p:PackageId=eQuantic.TickerQ.Dashboard \
            -p:PackageVersion=$TICKERQ_VERSION

          # Fix dependencies in eQuantic.TickerQ.Dashboard
          echo "🔧 Fixing dependencies in eQuantic.TickerQ.Dashboard package..."
          unzip -q ./temp-nupkgs/eQuantic.TickerQ.Dashboard.$TICKERQ_VERSION.nupkg -d ./temp-extract
          sed -i 's/<dependency id="TickerQ\.Utilities"/<dependency id="eQuantic.TickerQ.Utilities"/g' ./temp-extract/eQuantic.TickerQ.Dashboard.nuspec
          cd ./temp-extract && zip -q -r ../temp-nupkgs/eQuantic.TickerQ.Dashboard.$TICKERQ_VERSION.nupkg * && cd ..
          rm -rf ./temp-extract

          # Step 5: Build CosmosDb provider if needed
          SHOULD_PUBLISH_COSMOSDB="${{ steps.check.outputs.should_publish_cosmosdb }}"
          if [ "$SHOULD_PUBLISH_COSMOSDB" = "true" ]; then
            echo "📦 Building CosmosDb v$COSMOSDB_VERSION..."
            dotnet build src/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb.csproj \
              --configuration Release \
              -p:GeneratePackageOnBuild=false \
              -p:TickerQVersion=$TICKERQ_VERSION

            echo "📦 Packing CosmosDb v$COSMOSDB_VERSION with TickerQ v$TICKERQ_VERSION dependencies..."
            dotnet pack src/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb/eQuantic.TickerQ.EntityFrameworkCore.CosmosDb.csproj \
              --configuration Release \
              --no-build \
              --output ./nupkgs \
              -p:PackageVersion=$COSMOSDB_VERSION \
              -p:TickerQVersion=$TICKERQ_VERSION
          else
            echo "⏭️  CosmosDb v$COSMOSDB_VERSION already exists, skipping..."
            mkdir -p ./nupkgs
          fi

          # Step 6: Copy base packages to nupkgs if they should be published
          if [ "${{ github.event.inputs.publish_base_packages }}" = "true" ]; then
            echo "📦 Copying base eQuantic packages to ./nupkgs for publishing..."
            cp ./temp-nupkgs/eQuantic.TickerQ.$TICKERQ_VERSION.nupkg ./nupkgs/
            cp ./temp-nupkgs/eQuantic.TickerQ.Utilities.$TICKERQ_VERSION.nupkg ./nupkgs/
            cp ./temp-nupkgs/eQuantic.TickerQ.EntityFrameworkCore.$TICKERQ_VERSION.nupkg ./nupkgs/
            cp ./temp-nupkgs/eQuantic.TickerQ.Dashboard.$TICKERQ_VERSION.nupkg ./nupkgs/
            echo "✅ Base packages copied to ./nupkgs"
          fi

          # Cleanup
          rm -f PackageVersion.props

      - name: Show package info
        if: steps.check.outputs.should_build == 'true'
        run: |
          echo "📦 Package created:"
          for pkg in ./nupkgs/*.nupkg; do
            size=$(du -h "$pkg" | cut -f1)
            echo " - $(basename "$pkg"): $size"
          done

      - name: Upload package artifact
        if: steps.check.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cosmosdb-package
          path: ./nupkgs/*.nupkg
          retention-days: 5

  publish:
    needs: check-and-build
    if: needs.check-and-build.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    environment:
      name: production-publish

    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: cosmosdb-package
          path: ./nupkgs

      - name: Setup .NET 8 and .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Publish to NuGet.org
        run: |
          for pkg in ./nupkgs/*.nupkg; do
            echo "📤 Publishing $(basename "$pkg")..."
            dotnet nuget push "$pkg" \
              --source https://api.nuget.org/v3/index.json \
              --api-key ${{ secrets.NUGET_KEY }} \
              --skip-duplicate
          done
          echo "✅ Package published successfully!"
